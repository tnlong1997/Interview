https://leetcode.com/contest/weekly-contest-71/problems/minimum-distance-between-bst-nodes/

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:

    def minDiffInBST(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """

        def toArray(root):
            a = []
            a = a + [root.val]
            if (root.left is not None):
                a = a + toArray(root.left)
            if (root.right is not None):
                a = a + toArray(root.right)
            return a
        a = toArray(root)

        res = 1000000000000
        for i in range(0, len(a)):
            for j in range(i + 1, len(a)):
                if (res > abs(a[i] - a[j])):
                    res = abs(a[i] - a[j])
        return res
