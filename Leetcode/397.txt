Given a positive integer n and you can do operations as follow:

If n is even, replace n with n/2.
If n is odd, you can replace n with either n + 1 or n - 1.
What is the minimum number of replacements needed for n to become 1?

Example 1:

Input:
8

Output:
3

Explanation:
8 -> 4 -> 2 -> 1
Example 2:

Input:
7

Output:
4

Explanation:
7 -> 8 -> 4 -> 2 -> 1
or
7 -> 6 -> 3 -> 2 -> 1

class Solution:
    def integerReplacement(self, n):
        """
        :type n: int
        :rtype: int
        """
        count = 0
        m = n
        while (m > 0):
            count += 1
            m = m // 2

        memo = {}
        def dp(index, remainder, n, count):
            if (index, remainder) in memo:
                return memo[index, remainder]
            if (index == count - 1):
                return remainder

            r = ((n >> index) & 1) + remainder

            if (r % 2 == 0):
                res = dp(index + 1, r // 2, n, count) + 1
            else:
                res = min(dp(index + 1, 1, n, count), dp(index + 1, 0, n, count)) + 2

            memo[index, remainder] = res
            return res

        return dp(0, 0, n, count)
