You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        remain = 0
        res = None
        while (l1 is not None or l2 is not None):
            if (l1 is None):
                l1 = ListNode(0)
            elif (l2 is None):
                l2 = ListNode(0)
            else:
                x = l1.val + l2.val + remain
                remain = x // 10
                if (res is None):
                    res = ListNode(x % 10)
                    output = res
                else:
                    res.next = ListNode(x % 10)
                    res = res.next
                l1 = l1.next
                l2 = l2.next
        if (remain == 1): res.next = ListNode(1)
        return output
