Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

class Solution:
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        n = len(s)
        m = len(p)
        memo = {}

        def dp(i, j):
            if (i, j) in memo:
                return memo[i,j]
            if (j == m):
                return i == n

            match = (i < n) and p[j] in {s[i], '.'}
            if (j+1 < m and p[j+1] == "*"):
                res = dp(i, j+2)
                if (i < n):
                    res = dp(i+1, j) and match or res
            else:
                res = dp(i+1, j+1) and match

            memo[(i,j)] = res
            return res

        return dp(0, 0)
